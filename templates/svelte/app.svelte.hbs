<script lang="ts">
  import { onMount, onDestroy } from 'svelte';
  import { page } from '$app/stores';
  import { goto } from '$app/navigation';
  import { browser } from '$app/environment';
  import { writable, derived, type Writable } from 'svelte/store';
  {{#if analytics}}
  import { analytics } from '$lib/services/analytics';
  {{/if}}
  {{#if performance}}
  import { performance } from '$lib/services/performance';
  {{/if}}
  {{#if features.includes "notifications"}}
  import { notifications } from '$lib/services/notifications';
  {{/if}}
  {{#if features.includes "dark-mode"}}
  import { theme } from '$lib/stores/theme';
  {{/if}}

  import Header from '$lib/components/layout/Header.svelte';
  import Footer from '$lib/components/layout/Footer.svelte';
  import LoadingSpinner from '$lib/components/common/LoadingSpinner.svelte';
  import ErrorBoundary from '$lib/components/common/ErrorBoundary.svelte';
  import OfflineBanner from '$lib/components/common/OfflineBanner.svelte';
  import PWAInstallPrompt from '$lib/components/pwa/PWAInstallPrompt.svelte';
  import Toast from '$lib/components/common/Toast.svelte';

  import '../app.scss';

  // Props
  export let data: any = {};
  export let className: string = '';

  // App state
  interface AppState {
    isOnline: boolean;
    installPrompt: any;
    isInstalled: boolean;
    isLoading: boolean;
    error: string | null;
    toasts: Array<{
      id: string;
      type: 'success' | 'error' | 'warning' | 'info';
      message: string;
      duration?: number;
    }>;
  }

  const appState: Writable<AppState> = writable({
    isOnline: browser ? navigator.onLine : true,
    installPrompt: null,
    isInstalled: false,
    isLoading: false,
    error: null,
    toasts: []
  });

  // Derived stores
  const appClasses = derived(
    [appState{{#if features.includes "dark-mode"}}, theme{{/if}}],
    ([$appState{{#if features.includes "dark-mode"}}, $theme{{/if}}]) => {
      return [
        'app',
        className,
        $appState.isOnline ? 'online' : 'offline',
        $appState.isLoading ? 'loading' : '',
        $appState.isInstalled ? 'installed' : '',
        {{#if features.includes "dark-mode"}}
        $theme === 'dark' ? 'dark' : 'light'
        {{/if}}
      ].filter(Boolean).join(' ');
    }
  );

  // Event handlers
  let beforeInstallPromptHandler: (event: Event) => void;
  let appInstalledHandler: () => void;
  let onlineHandler: () => void;
  let offlineHandler: () => void;
  let errorHandler: (event: ErrorEvent) => void;
  let unhandledRejectionHandler: (event: PromiseRejectionEvent) => void;

  // Lifecycle
  onMount(() => {
    if (!browser) return;

    initializeApp();
    setupEventListeners();
    setupServiceWorker();
  });

  onDestroy(() => {
    if (!browser) return;

    // Clean up event listeners
    window.removeEventListener('beforeinstallprompt', beforeInstallPromptHandler);
    window.removeEventListener('appinstalled', appInstalledHandler);
    window.removeEventListener('online', onlineHandler);
    window.removeEventListener('offline', offlineHandler);
    window.removeEventListener('error', errorHandler);
    window.removeEventListener('unhandledrejection', unhandledRejectionHandler);
  });

  // Initialize app
  function initializeApp(): void {
    {{#if analytics}}
    // Initialize analytics
    analytics.track('app_loaded', {
      framework: '{{framework}}',
      version: '{{version}}',
      features: {{json features}},
      timestamp: new Date().toISOString()
    });
    {{/if}}

    {{#if performance}}
    // Initialize performance monitoring
    performance.initialize();
    {{/if}}

    {{#if features.includes "notifications"}}
    // Initialize notifications
    notifications.initialize();
    {{/if}}

    {{#if features.includes "dark-mode"}}
    // Initialize theme
    theme.initialize();
    {{/if}}
  }

  // Setup event listeners
  function setupEventListeners(): void {
    // PWA install prompt
    beforeInstallPromptHandler = (event: Event) => {
      event.preventDefault();
      appState.update(state => ({
        ...state,
        installPrompt: event
      }));
    };

    // PWA installed
    appInstalledHandler = () => {
      appState.update(state => ({
        ...state,
        isInstalled: true,
        installPrompt: null
      }));

      {{#if analytics}}
      analytics.track('pwa_installed');
      {{/if}}
    };

    // Network status
    onlineHandler = () => {
      appState.update(state => ({
        ...state,
        isOnline: true
      }));

      {{#if analytics}}
      analytics.track('network_online');
      {{/if}}
    };

    offlineHandler = () => {
      appState.update(state => ({
        ...state,
        isOnline: false
      }));

      {{#if analytics}}
      analytics.track('network_offline');
      {{/if}}
    };

    // Error handling
    errorHandler = (event: ErrorEvent) => {
      handleError(event.error);
    };

    unhandledRejectionHandler = (event: PromiseRejectionEvent) => {
      handleError(new Error(event.reason));
    };

    // Add event listeners
    window.addEventListener('beforeinstallprompt', beforeInstallPromptHandler);
    window.addEventListener('appinstalled', appInstalledHandler);
    window.addEventListener('online', onlineHandler);
    window.addEventListener('offline', offlineHandler);
    window.addEventListener('error', errorHandler);
    window.addEventListener('unhandledrejection', unhandledRejectionHandler);
  }

  // Setup service worker
  function setupServiceWorker(): void {
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('/sw.js')
        .then(registration => {
          console.log('SW registered:', registration);

          // Check for updates
          registration.addEventListener('updatefound', () => {
            const newWorker = registration.installing;
            if (newWorker) {
              newWorker.addEventListener('statechange', () => {
                if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                  showToast('Update available! Refresh to get the latest version.', 'info', 10000);
                }
              });
            }
          });
        })
        .catch(error => {
          console.error('SW registration failed:', error);
        });
    }
  }

  // Handle PWA install
  async function handleInstallClick(): Promise<void> {
    const state = appState;
    const currentState = state.subscribe ? undefined : state;
    const installPrompt = currentState?.installPrompt;

    if (installPrompt) {
      try {
        const result = await installPrompt.prompt();

        {{#if analytics}}
        analytics.track('pwa_install_prompt_result', {
          outcome: result.outcome
        });
        {{/if}}

        appState.update(state => ({
          ...state,
          installPrompt: null
        }));
      } catch (error) {
        console.error('Error installing PWA:', error);
        handleError(error as Error);
      }
    }
  }

  // Dismiss install prompt
  function dismissInstallPrompt(): void {
    appState.update(state => ({
      ...state,
      installPrompt: null
    }));

    {{#if analytics}}
    analytics.track('pwa_install_prompt_dismissed');
    {{/if}}
  }

  // Error handling
  function handleError(error: Error): void {
    console.error('App Error:', error);

    appState.update(state => ({
      ...state,
      error: error.message || 'An unexpected error occurred'
    }));

    {{#if analytics}}
    analytics.track('app_error', {
      error: error.message,
      stack: error.stack
    });
    {{/if}}

    showToast(error.message || 'An unexpected error occurred', 'error');
  }

  // Clear error
  function clearError(): void {
    appState.update(state => ({
      ...state,
      error: null
    }));
  }

  // Toast notifications
  function showToast(message: string, type: 'success' | 'error' | 'warning' | 'info' = 'info', duration: number = 5000): void {
    const id = Math.random().toString(36).substr(2, 9);

    appState.update(state => ({
      ...state,
      toasts: [
        ...state.toasts,
        { id, type, message, duration }
      ]
    }));

    // Auto-remove toast
    setTimeout(() => {
      removeToast(id);
    }, duration);
  }

  function removeToast(id: string): void {
    appState.update(state => ({
      ...state,
      toasts: state.toasts.filter(toast => toast.id !== id)
    }));
  }

  // Reactive statements
  $: {
    // Track page views
    if (browser && $page) {
      {{#if analytics}}
      analytics.track('page_view', {
        page: $page.url.pathname,
        title: document.title
      });
      {{/if}}
    }
  }
</script>

<svelte:head>
  <title>{{businessName}} - {{description}}</title>
  <meta name="description" content="{{description}}" />
  <meta name="keywords" content="{{businessName}}, {{industry}}, {{#each seoStrategy.keywords}}{{this}}, {{/each}}pwa" />
  <meta name="author" content="{{businessName}}" />
  <meta name="theme-color" content="{{colorScheme.primary}}" />

  <!-- Open Graph -->
  <meta property="og:title" content="{{businessName}} - {{description}}" />
  <meta property="og:description" content="{{description}}" />
  <meta property="og:type" content="website" />
  <meta property="og:url" content="{$page.url.href}" />
  <meta property="og:image" content="/og-image.jpg" />

  <!-- Twitter Card -->
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content="{{businessName}} - {{description}}" />
  <meta name="twitter:description" content="{{description}}" />
  <meta name="twitter:image" content="/og-image.jpg" />

  <!-- PWA -->
  <link rel="manifest" href="/manifest.json" />
  <meta name="apple-mobile-web-app-capable" content="yes" />
  <meta name="apple-mobile-web-app-status-bar-style" content="default" />
  <meta name="apple-mobile-web-app-title" content="{{businessName}}" />

  <!-- Icons -->
  <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
  <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
  <link rel="apple-touch-icon" href="/apple-touch-icon.png" />

  <!-- Structured Data -->
  {@html `
    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "Organization",
        "name": "{{businessName}}",
        "description": "{{description}}",
        "url": "${$page.url.origin}",
        ${{{#if location}}}
        "address": {
          "@type": "PostalAddress",
          "addressLocality": "{{location}}",
          "addressCountry": "US"
        },
        ${{{/if}}}
        "sameAs": [
          ${{{#each socialLinks}}}
          "{{this}}"${{{#unless @last}}},${{{/unless}}}
          ${{{/each}}}
        ]
      }
    </script>
  `}
</svelte:head>

<div class={$appClasses}>
  <ErrorBoundary>
    <Header
      isOnline={$appState.isOnline}
      canInstall={!!$appState.installPrompt}
      on:installClick={handleInstallClick}
    />

    <main class="main-content" role="main">
      {#if !$appState.isOnline}
        <OfflineBanner message="You're currently offline. Some features may be limited." />
      {/if}

      {#if $appState.error}
        <div class="error-container">
          <h2>Something went wrong</h2>
          <p>{$appState.error}</p>
          <button on:click={clearError} class="btn btn-primary">Try Again</button>
        </div>
      {:else if $appState.isLoading}
        <LoadingSpinner />
      {:else}
        <slot />
      {/if}
    </main>

    <Footer />

    {#if $appState.installPrompt}
      <PWAInstallPrompt
        on:install={handleInstallClick}
        on:dismiss={dismissInstallPrompt}
      />
    {/if}

    <!-- Toast notifications -->
    <div class="toast-container">
      {#each $appState.toasts as toast (toast.id)}
        <Toast
          type={toast.type}
          message={toast.message}
          on:close={() => removeToast(toast.id)}
        />
      {/each}
    </div>
  </ErrorBoundary>
</div>

<style lang="scss">
  :global(html) {
    height: 100%;
    scroll-behavior: smooth;
  }

  :global(body) {
    height: 100%;
    margin: 0;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
      sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  .app {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    transition: all 0.3s ease;

    &.offline {
      opacity: 0.9;
    }

    &.loading {
      pointer-events: none;
    }

    &.dark {
      background-color: #1a1a1a;
      color: #ffffff;
    }
  }

  .main-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    position: relative;
  }

  .error-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    text-align: center;
    min-height: 400px;

    h2 {
      color: #dc2626;
      margin-bottom: 1rem;
    }

    p {
      color: #6b7280;
      margin-bottom: 1.5rem;
    }
  }

  .btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 0.375rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
    display: inline-block;
    text-align: center;

    &.btn-primary {
      background-color: {{colorScheme.primary}};
      color: white;

      &:hover {
        background-color: {{colorScheme.secondary}};
      }
    }
  }

  .toast-container {
    position: fixed;
    top: 1rem;
    right: 1rem;
    z-index: 1000;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    max-width: 400px;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .app {
      font-size: 0.9rem;
    }

    .toast-container {
      left: 1rem;
      right: 1rem;
      max-width: none;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .app {
      transition: none;
    }

    :global(html) {
      scroll-behavior: auto;
    }
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .app {
      border: 1px solid;
    }
  }
</style>
