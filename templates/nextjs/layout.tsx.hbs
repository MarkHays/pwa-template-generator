import type { Metadata, Viewport } from 'next'
import { Inter } from 'next/font/google'
import { Suspense } from 'react'
{{#if analytics}}
import { Analytics } from '@/components/analytics/Analytics'
{{/if}}
{{#if performance}}
import { PerformanceMonitor } from '@/components/performance/PerformanceMonitor'
{{/if}}
{{#if features.includes "notifications"}}
import { NotificationProvider } from '@/providers/NotificationProvider'
{{/if}}
{{#if features.includes "dark-mode"}}
import { ThemeProvider } from '@/providers/ThemeProvider'
{{/if}}
import { ErrorBoundary } from '@/components/common/ErrorBoundary'
import { LoadingSpinner } from '@/components/common/LoadingSpinner'
import { Header } from '@/components/layout/Header'
import { Footer } from '@/components/layout/Footer'
import { PWAInstallPrompt } from '@/components/pwa/PWAInstallPrompt'
import { NetworkStatusBanner } from '@/components/common/NetworkStatusBanner'
import '@/styles/globals.scss'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: {
    template: '%s | {{businessName}}',
    default: '{{businessName}} - {{description}}'
  },
  description: '{{description}}',
  keywords: [
    '{{businessName}}',
    '{{industry}}',
    {{#each seoStrategy.keywords}}
    '{{this}}',
    {{/each}}
    'progressive web app',
    'pwa'
  ],
  authors: [{ name: '{{businessName}}' }],
  creator: '{{businessName}}',
  publisher: '{{businessName}}',
  formatDetection: {
    email: false,
    address: false,
    telephone: false,
  },
  metadataBase: new URL(process.env.NEXT_PUBLIC_BASE_URL || 'https://localhost:3000'),
  alternates: {
    canonical: '/',
  },
  openGraph: {
    type: 'website',
    siteName: '{{businessName}}',
    title: '{{businessName}} - {{description}}',
    description: '{{description}}',
    url: '/',
    images: [
      {
        url: '/og-image.jpg',
        width: 1200,
        height: 630,
        alt: '{{businessName}} - {{description}}',
      },
    ],
  },
  twitter: {
    card: 'summary_large_image',
    title: '{{businessName}} - {{description}}',
    description: '{{description}}',
    images: ['/og-image.jpg'],
  },
  robots: {
    index: true,
    follow: true,
    googleBot: {
      index: true,
      follow: true,
      'max-video-preview': -1,
      'max-image-preview': 'large',
      'max-snippet': -1,
    },
  },
  manifest: '/manifest.json',
  icons: {
    icon: [
      { url: '/favicon-16x16.png', sizes: '16x16', type: 'image/png' },
      { url: '/favicon-32x32.png', sizes: '32x32', type: 'image/png' },
    ],
    apple: [
      { url: '/apple-touch-icon.png', sizes: '180x180', type: 'image/png' },
    ],
    other: [
      { rel: 'mask-icon', url: '/safari-pinned-tab.svg', color: '{{colorScheme.primary}}' },
    ],
  },
  appleWebApp: {
    capable: true,
    statusBarStyle: 'default',
    title: '{{businessName}}',
  },
  verification: {
    google: process.env.NEXT_PUBLIC_GOOGLE_VERIFICATION,
    yandex: process.env.NEXT_PUBLIC_YANDEX_VERIFICATION,
    yahoo: process.env.NEXT_PUBLIC_YAHOO_VERIFICATION,
  },
  {{#if features.includes "local-seo"}}
  other: {
    'geo.region': '{{location}}',
    'geo.position': process.env.NEXT_PUBLIC_GEO_POSITION,
    'ICBM': process.env.NEXT_PUBLIC_ICBM,
  },
  {{/if}}
}

export const viewport: Viewport = {
  themeColor: [
    { media: '(prefers-color-scheme: light)', color: '{{colorScheme.primary}}' },
    { media: '(prefers-color-scheme: dark)', color: '{{colorScheme.secondary}}' },
  ],
  width: 'device-width',
  initialScale: 1,
  maximumScale: 5,
  userScalable: true,
  viewportFit: 'cover',
}

interface RootLayoutProps {
  children: React.ReactNode
}

export default function RootLayout({ children }: RootLayoutProps) {
  return (
    <html
      lang="en"
      className={inter.className}
      suppressHydrationWarning
    >
      <head>
        {/* Preload critical resources */}
        <link
          rel="preload"
          href="/fonts/inter-var.woff2"
          as="font"
          type="font/woff2"
          crossOrigin="anonymous"
        />

        {/* DNS prefetch for external resources */}
        {{#if analytics}}
        <link rel="dns-prefetch" href="//www.google-analytics.com" />
        <link rel="dns-prefetch" href="//www.googletagmanager.com" />
        {{/if}}

        {/* Microsoft Tile */}
        <meta name="msapplication-TileColor" content="{{colorScheme.primary}}" />
        <meta name="msapplication-config" content="/browserconfig.xml" />

        {/* Safari specific */}
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-status-bar-style" content="default" />
        <meta name="apple-mobile-web-app-title" content="{{businessName}}" />

        {/* Disable automatic detection and formatting */}
        <meta name="format-detection" content="telephone=no" />
        <meta name="format-detection" content="date=no" />
        <meta name="format-detection" content="address=no" />
        <meta name="format-detection" content="email=no" />
      </head>

      <body>
        <ErrorBoundary>
          {{#if features.includes "dark-mode"}}
          <ThemeProvider>
          {{/if}}
          {{#if features.includes "notifications"}}
          <NotificationProvider>
          {{/if}}
            <div className="app">
              <NetworkStatusBanner />

              <Header />

              <main className="main-content" role="main">
                <Suspense fallback={<LoadingSpinner />}>
                  {children}
                </Suspense>
              </main>

              <Footer />

              <PWAInstallPrompt />
            </div>
          {{#if features.includes "notifications"}}
          </NotificationProvider>
          {{/if}}
          {{#if features.includes "dark-mode"}}
          </ThemeProvider>
          {{/if}}
        </ErrorBoundary>

        {{#if analytics}}
        <Analytics />
        {{/if}}

        {{#if performance}}
        <PerformanceMonitor />
        {{/if}}

        {/* Service Worker Registration */}
        <script
          dangerouslySetInnerHTML={{
            __html: `
              if ('serviceWorker' in navigator && process.env.NODE_ENV === 'production') {
                window.addEventListener('load', function() {
                  navigator.serviceWorker.register('/sw.js')
                    .then(function(registration) {
                      console.log('SW registered: ', registration);
                    })
                    .catch(function(registrationError) {
                      console.log('SW registration failed: ', registrationError);
                    });
                });
              }
            `,
          }}
        />

        {/* Structured Data */}
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{
            __html: JSON.stringify({
              '@context': 'https://schema.org',
              '@type': 'Organization',
              name: '{{businessName}}',
              url: process.env.NEXT_PUBLIC_BASE_URL,
              description: '{{description}}',
              {{#if location}}
              address: {
                '@type': 'PostalAddress',
                addressLocality: '{{location}}',
                addressCountry: 'US'
              },
              {{/if}}
              {{#if features.includes "local-seo"}}
              geo: {
                '@type': 'GeoCoordinates',
                latitude: process.env.NEXT_PUBLIC_LATITUDE,
                longitude: process.env.NEXT_PUBLIC_LONGITUDE
              },
              {{/if}}
              sameAs: [
                {{#each socialLinks}}
                '{{this}}',
                {{/each}}
              ]
            })
          }}
        />
      </body>
    </html>
  )
}
