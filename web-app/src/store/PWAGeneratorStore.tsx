import React, { createContext, useContext, useReducer, ReactNode } from "react";
import { toast } from "react-hot-toast";
import { createProjectZip } from "../utils/projectGenerator";
import { WebDirectProjectGenerator } from "../utils/WebDirectProjectGenerator";
import { aiService, AIRecommendations } from "../services/aiService";
import { ValidationResult } from "../services/projectValidator";

// Enhanced validation result interface
interface EnhancedValidationResult extends ValidationResult {
  autoFixedCount: number;
  preventedIssuesCount: number;
  finalStatus: string;
}

// Types
export interface BusinessInfo {
  businessName: string;
  industry: string;
  description: string;
  targetAudience: string;
  location?: string;
  website?: string;
  contactEmail?: string;
  contactPhone?: string;
  currentChallenges: string[];
  businessGoals: string[];
}

export interface Customization {
  colorScheme: string;
  primaryColor: string;
  secondaryColor: string;
  fontFamily: string;
  layout: string;
  darkMode: boolean;
  animations: boolean;
  customCSS: string;
}

export interface Deployment {
  platforms: string[];
  cicd: string;
  testing: boolean;
  monitoring: string[];
  analytics: string[];
  domain?: string;
  ssl: boolean;
}

export interface EnterpriseConfig {
  enabled: boolean;
  authProviders: string[];
  database: string;
  rbac: boolean;
  mfa: boolean;
  sessionManagement: boolean;
  autoGeneratedAPIs: boolean;
  realTimeSync: boolean;
  migrations: boolean;
  restAPI: boolean;
  graphqlAPI: boolean;
  apiDocs: boolean;
  rateLimiting: boolean;
  websockets: boolean;
  liveCollaboration: boolean;
  presenceAwareness: boolean;
  healthChecks: boolean;
  performanceMetrics: boolean;
  errorTracking: boolean;
  customDashboards: boolean;
  auditLogging: boolean;
  deploymentPlatforms: string[];
  cicd: boolean;
  environmentManagement: boolean;
  docker: boolean;
  loadBalancing: boolean;
}

export interface GeneratedProject {
  id: string;
  name: string;
  framework: string;
  features: string[];
  files: Array<{
    path: string;
    content: string;
    type: string;
  }>;
  downloadUrl?: string;
  createdAt: string;
}

export interface PWAGeneratorState {
  // Current step in the wizard
  currentStep: number;

  // Business information
  businessInfo: BusinessInfo;

  // AI recommendations
  aiRecommendations: AIRecommendations | null;

  // Technical selections
  selectedFramework: string;
  selectedFeatures: string[];
  typescript: boolean;

  // Customization
  customization: Customization;

  // Deployment
  deployment: Deployment;

  // Enterprise configuration
  enterpriseConfig: EnterpriseConfig;

  // Generation state
  isGenerating: boolean;
  generationProgress: number;
  generationStep: string;
  generatedProject: GeneratedProject | null;

  // UI state
  isAnalyzing: boolean;
  error: string | null;

  // Validation state
  isValidating: boolean;
  validationResult: EnhancedValidationResult | null;

  validationEnabled: boolean;

  // Enhanced validation system state
  enhancedValidationEnabled: boolean;
  validationResults: {
    isValid: boolean;
    errors: any[];
    warnings: any[];
    autoFixedCount: number;
    preventedIssuesCount: number;
    finalStatus: string;
  };

  // History
  projectHistory: GeneratedProject[];
}

// Actions
export type PWAGeneratorAction =
  | { type: "SET_CURRENT_STEP"; payload: number }
  | { type: "SET_BUSINESS_INFO"; payload: Partial<BusinessInfo> }
  | { type: "SET_AI_RECOMMENDATIONS"; payload: AIRecommendations | null }
  | { type: "SET_SELECTED_FRAMEWORK"; payload: string }
  | { type: "SET_SELECTED_FEATURES"; payload: string[] }
  | { type: "SET_TYPESCRIPT"; payload: boolean }
  | { type: "SET_CUSTOMIZATION"; payload: Partial<Customization> }
  | { type: "SET_DEPLOYMENT"; payload: Partial<Deployment> }
  | { type: "SET_ENTERPRISE_CONFIG"; payload: Partial<EnterpriseConfig> }
  | { type: "SET_GENERATING"; payload: boolean }
  | {
      type: "SET_GENERATION_PROGRESS";
      payload: { progress: number; step: string };
    }
  | { type: "SET_GENERATED_PROJECT"; payload: GeneratedProject }
  | { type: "SET_ANALYZING"; payload: boolean }
  | { type: "SET_ERROR"; payload: string | null }
  | { type: "SET_VALIDATING"; payload: boolean }
  | { type: "SET_VALIDATION_RESULT"; payload: EnhancedValidationResult | null }
  | { type: "SET_VALIDATION_ENABLED"; payload: boolean }
  | { type: "ADD_TO_HISTORY"; payload: GeneratedProject }
  | { type: "RESET_BUILDER" };

// Initial state
const initialState: PWAGeneratorState = {
  currentStep: 0,
  businessInfo: {
    businessName: "",
    industry: "",
    description: "",
    targetAudience: "",
    location: "",
    website: "",
    contactEmail: "",
    contactPhone: "",
    currentChallenges: [],
    businessGoals: [],
  },
  aiRecommendations: null,
  selectedFramework: "",
  selectedFeatures: [],
  typescript: true,
  customization: {
    colorScheme: "professional",
    primaryColor: "#3182ce",
    secondaryColor: "#718096",
    fontFamily: "Inter",
    layout: "standard",
    darkMode: false,
    animations: true,
    customCSS: "",
  },
  deployment: {
    platforms: [],
    cicd: "",
    testing: false,
    monitoring: [],
    analytics: [],
    domain: "",
    ssl: true,
  },
  enterpriseConfig: {
    enabled: false,
    authProviders: [],
    database: "",
    rbac: false,
    mfa: false,
    sessionManagement: false,
    autoGeneratedAPIs: false,
    realTimeSync: false,
    migrations: false,
    restAPI: false,
    graphqlAPI: false,
    apiDocs: false,
    rateLimiting: false,
    websockets: false,
    liveCollaboration: false,
    presenceAwareness: false,
    healthChecks: false,
    performanceMetrics: false,
    errorTracking: false,
    customDashboards: false,
    auditLogging: false,
    deploymentPlatforms: [],
    cicd: false,
    environmentManagement: false,
    docker: false,
    loadBalancing: false,
  },
  isGenerating: false,
  generationProgress: 0,
  generationStep: "",
  generatedProject: null,
  isAnalyzing: false,
  error: null,
  isValidating: false,
  validationResult: null,

  validationEnabled: false,
  // Enhanced validation system state
  enhancedValidationEnabled: false,
  validationResults: {
    isValid: true,
    errors: [],
    warnings: [],
    autoFixedCount: 0,
    preventedIssuesCount: 0,
    finalStatus: "READY_TO_USE",
  },
  projectHistory: [],
};

// Reducer
function pwaGeneratorReducer(
  state: PWAGeneratorState,
  action: PWAGeneratorAction,
): PWAGeneratorState {
  switch (action.type) {
    case "SET_CURRENT_STEP":
      return {
        ...state,
        currentStep: action.payload,
        error: null,
      };

    case "SET_BUSINESS_INFO":
      return {
        ...state,
        businessInfo: {
          ...state.businessInfo,
          ...action.payload,
        },
      };

    case "SET_AI_RECOMMENDATIONS":
      return {
        ...state,
        aiRecommendations: action.payload,
        isAnalyzing: false,
      };

    case "SET_SELECTED_FRAMEWORK":
      return {
        ...state,
        selectedFramework: action.payload,
      };

    case "SET_SELECTED_FEATURES":
      return {
        ...state,
        selectedFeatures: action.payload,
      };

    case "SET_TYPESCRIPT":
      return {
        ...state,
        typescript: action.payload,
      };

    case "SET_CUSTOMIZATION":
      return {
        ...state,
        customization: {
          ...state.customization,
          ...action.payload,
        },
      };

    case "SET_DEPLOYMENT":
      return {
        ...state,
        deployment: {
          ...state.deployment,
          ...action.payload,
        },
      };

    case "SET_ENTERPRISE_CONFIG":
      return {
        ...state,
        enterpriseConfig: {
          ...state.enterpriseConfig,
          ...action.payload,
        },
      };

    case "SET_GENERATING":
      return {
        ...state,
        isGenerating: action.payload,
        generationProgress: action.payload ? 0 : state.generationProgress,
        generationStep: action.payload ? "Starting..." : state.generationStep,
      };

    case "SET_GENERATION_PROGRESS":
      return {
        ...state,
        generationProgress: action.payload.progress,
        generationStep: action.payload.step,
      };

    case "SET_GENERATED_PROJECT":
      return {
        ...state,
        generatedProject: action.payload,
        isGenerating: false,
        generationProgress: 100,
        generationStep: "Complete",
      };

    case "SET_ANALYZING":
      return {
        ...state,
        isAnalyzing: action.payload,
      };

    case "SET_ERROR":
      return {
        ...state,
        error: action.payload,
        isGenerating: false,
        isAnalyzing: false,
      };

    case "SET_VALIDATING":
      return {
        ...state,
        isValidating: action.payload,
      };

    case "SET_VALIDATION_RESULT":
      return {
        ...state,
        validationResult: action.payload,
        isValidating: false,
      };

    case "SET_VALIDATION_ENABLED":
      return {
        ...state,
        validationEnabled: action.payload,
      };

    case "ADD_TO_HISTORY":
      return {
        ...state,
        projectHistory: [action.payload, ...state.projectHistory.slice(0, 9)], // Keep last 10
      };

    case "RESET_BUILDER":
      return {
        ...initialState,
        projectHistory: state.projectHistory, // Keep history
      };

    default:
      return state;
  }
}

// Context
const PWAGeneratorContext = createContext<{
  state: PWAGeneratorState;
  dispatch: React.Dispatch<PWAGeneratorAction>;
} | null>(null);

// Provider component
export const PWAGeneratorProvider: React.FC<{ children: ReactNode }> = ({
  children,
}) => {
  const [state, dispatch] = useReducer(pwaGeneratorReducer, initialState);

  return (
    <PWAGeneratorContext.Provider value={{ state, dispatch }}>
      {children}
    </PWAGeneratorContext.Provider>
  );
};

// Custom hook
export const usePWAGeneratorStore = () => {
  const context = useContext(PWAGeneratorContext);
  if (!context) {
    throw new Error(
      "usePWAGeneratorStore must be used within a PWAGeneratorProvider",
    );
  }

  const { state, dispatch } = context;

  // Action creators
  const setCurrentStep = (step: number) => {
    dispatch({ type: "SET_CURRENT_STEP", payload: step });
  };

  const setBusinessInfo = (info: Partial<BusinessInfo>) => {
    dispatch({ type: "SET_BUSINESS_INFO", payload: info });
  };

  const setAIRecommendations = (recommendations: AIRecommendations | null) => {
    dispatch({ type: "SET_AI_RECOMMENDATIONS", payload: recommendations });
  };

  const setSelectedFramework = (framework: string) => {
    dispatch({ type: "SET_SELECTED_FRAMEWORK", payload: framework });
  };

  const setSelectedFeatures = (features: string[]) => {
    dispatch({ type: "SET_SELECTED_FEATURES", payload: features });
  };

  const setTypescript = (typescript: boolean) => {
    dispatch({ type: "SET_TYPESCRIPT", payload: typescript });
  };

  const setCustomization = (customization: Partial<Customization>) => {
    dispatch({ type: "SET_CUSTOMIZATION", payload: customization });
  };

  const setDeployment = (deployment: Partial<Deployment>) => {
    dispatch({ type: "SET_DEPLOYMENT", payload: deployment });
  };

  const setEnterpriseConfig = (config: Partial<EnterpriseConfig>) => {
    dispatch({ type: "SET_ENTERPRISE_CONFIG", payload: config });
  };

  const setError = (error: string | null) => {
    dispatch({ type: "SET_ERROR", payload: error });
  };

  const setValidationEnabled = (enabled: boolean) => {
    dispatch({ type: "SET_VALIDATION_ENABLED", payload: enabled });
  };

  const resetBuilder = () => {
    dispatch({ type: "RESET_BUILDER" });
  };

  // Async actions
  const analyzeBusinessNeeds = async () => {
    try {
      dispatch({ type: "SET_ANALYZING", payload: true });
      dispatch({ type: "SET_ERROR", payload: null });

      // Call real AI service (Claude)
      const recommendations = await aiService.analyzeBusinessNeeds(
        state.businessInfo,
      );

      dispatch({
        type: "SET_AI_RECOMMENDATIONS",
        payload: recommendations,
      });

      if (aiService.hasApiKey()) {
        toast.success("AI analysis complete with Claude!");
      } else {
        toast.success("Analysis complete with enhanced recommendations!");
      }
    } catch (error) {
      console.log(
        "AI analysis using fallback:",
        error instanceof Error ? error.message : "Unknown error",
      );

      // Try to get fallback recommendations
      try {
        const fallbackRecommendations = await aiService.analyzeBusinessNeeds(
          state.businessInfo,
        );
        dispatch({
          type: "SET_AI_RECOMMENDATIONS",
          payload: fallbackRecommendations,
        });
        toast.success("Analysis complete with smart recommendations!", {
          icon: "🤖",
        });
      } catch (fallbackError) {
        dispatch({
          type: "SET_ERROR",
          payload:
            "Unable to generate recommendations. Please check your business information.",
        });
        toast.error("Analysis unavailable. Please try again.");
      }
    } finally {
      dispatch({ type: "SET_ANALYZING", payload: false });
    }
  };

  const validateProject = async (files: any[], config: any) => {
    try {
      dispatch({ type: "SET_VALIDATING", payload: true });
      dispatch({ type: "SET_ERROR", payload: null });

      const webGenerator = new WebDirectProjectGenerator({
        typescript: state.typescript,
      });
      const validationResult = await webGenerator.validateGeneratedProject(
        files,
        config,
      );

      if (!validationResult.isValid) {
        toast.error(
          `Validation failed: ${validationResult.errors.length} errors found`,
        );
      } else {
        toast.success("Project validation passed!");
      }

      return validationResult;
    } catch (error) {
      console.error("Validation error:", error);
      dispatch({
        type: "SET_ERROR",
        payload: error instanceof Error ? error.message : "Validation failed",
      });
      toast.error("Validation failed");
      return null;
    } finally {
      dispatch({ type: "SET_VALIDATING", payload: false });
    }
  };

  const generateProject = async () => {
    try {
      dispatch({ type: "SET_GENERATING", payload: true });
      dispatch({ type: "SET_ERROR", payload: null });

      const steps = [
        "Analyzing business requirements...",
        "Creating project structure...",
        "Generating components...",
        "Setting up PWA configuration...",
        "Implementing selected features...",
        "Optimizing performance...",
        "Creating deployment files...",
        "Finalizing build...",
      ];

      // Simulate progress updates
      for (let i = 0; i < steps.length; i++) {
        dispatch({
          type: "SET_GENERATION_PROGRESS",
          payload: {
            progress: ((i + 1) / steps.length) * 100,
            step: steps[i],
          },
        });
        await new Promise((resolve) => setTimeout(resolve, 500));
      }

      // Generate all project files using WebDirectProjectGenerator
      const webGenerator = new WebDirectProjectGenerator({
        typescript: state.typescript,
      });

      const projectConfig = {
        projectName: state.businessInfo.businessName || "my-pwa",
        businessName: state.businessInfo.businessName,
        framework: state.selectedFramework || "react",
        industry: state.businessInfo.industry,
        location: state.businessInfo.location,
        targetAudience: state.businessInfo.targetAudience,
        primaryGoal: state.businessInfo.businessGoals?.[0] || "business growth",
        features: state.selectedFeatures,
        selectedFeatures: state.selectedFeatures,
        ...(state.aiRecommendations && {
          aiRecommendations: state.aiRecommendations,
        }),
        businessData: {
          name: state.businessInfo.businessName,
          location: state.businessInfo.location,
          targetAudience: state.businessInfo.targetAudience,
          primaryGoal:
            state.businessInfo.businessGoals?.[0] || "business growth",
          description: state.businessInfo.description,
          contactEmail: state.businessInfo.contactEmail,
          contactPhone: state.businessInfo.contactPhone,
        },
      };

      // Generate all project files using WebDirectProjectGenerator
      let files = await webGenerator.generateProject(projectConfig);

      // Add deployment files
      if (state.deployment.platforms.includes("vercel")) {
        files.push({
          path: "vercel.json",
          content: JSON.stringify(
            {
              rewrites: [{ source: "/(.*)", destination: "/index.html" }],
            },
            null,
            2,
          ),
          type: "json",
        });
      }

      if (state.deployment.platforms.includes("netlify")) {
        files.push({
          path: "_redirects",
          content: "/*    /index.html   200",
          type: "text",
        });
      }

      // Phase: Validation and Auto-Fix
      if (state.validationEnabled) {
        dispatch({
          type: "SET_GENERATION_PROGRESS",
          payload: {
            progress: 85,
            step: "Validating project structure...",
          },
        });

        const validationResult = await webGenerator.validateGeneratedProject(
          files,
          projectConfig,
        );

        dispatch({ type: "SET_VALIDATION_RESULT", payload: validationResult });

        // Use the enhanced validation result (auto-fixing already done)
        if (
          validationResult.fixedFiles &&
          validationResult.fixedFiles.length > 0
        ) {
          files = validationResult.fixedFiles;
        }

        if (validationResult.finalStatus === "READY_TO_USE") {
          toast.success(
            `✅ Project ready to use! Auto-fixed ${validationResult.autoFixedCount} issues, prevented ${validationResult.preventedIssuesCount} issues`,
          );
        } else if (validationResult.autoFixedCount > 0) {
          toast.success(
            `🔧 Auto-fixed ${validationResult.autoFixedCount} issues! Project status: ${validationResult.finalStatus}`,
          );
        } else {
          toast.success("Project validation completed!");
        }
      }

      // Create downloadable zip file
      const projectName =
        state.businessInfo.businessName.toLowerCase().replace(/\s+/g, "-") ||
        "my-pwa";
      const zipBlob = await createProjectZip(
        files,
        projectName,
        state.selectedFeatures,
      );
      const downloadUrl = URL.createObjectURL(zipBlob);

      const generatedProject: GeneratedProject = {
        id: Date.now().toString(),
        name: state.businessInfo.businessName || "My PWA",
        framework: state.selectedFramework || "react",
        features: state.selectedFeatures,
        files,
        downloadUrl,
        createdAt: new Date().toISOString(),
      };

      dispatch({ type: "SET_GENERATED_PROJECT", payload: generatedProject });
      dispatch({ type: "ADD_TO_HISTORY", payload: generatedProject });

      // Show validation summary if enabled
      if (state.validationEnabled && state.validationResult) {
        const summary = {
          totalFiles: files.length,
          totalErrors: 0,
          totalWarnings: 0,
          autoFixedCount: 0,
          preventedIssuesCount: 0,
        };
        // const summary = projectValidator.getValidationSummary(state.validationResult);
        console.log("📊 Validation Summary:", summary);
      }

      toast.success("PWA generated successfully!");
    } catch (error) {
      console.error("Generation error:", error);
      dispatch({ type: "SET_ERROR", payload: "Failed to generate project" });
      toast.error("Generation failed");
    }
  };

  return {
    // State
    ...state,

    // Actions
    setCurrentStep,
    setBusinessInfo,
    setAIRecommendations,
    setSelectedFramework,
    setSelectedFeatures,
    setTypescript,
    setCustomization,
    setDeployment,
    setEnterpriseConfig,
    setError,
    setValidationEnabled,
    resetBuilder,

    // Async actions
    analyzeBusinessNeeds,
    generateProject,
    validateProject,
  };
};
